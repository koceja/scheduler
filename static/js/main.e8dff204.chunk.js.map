{"version":3,"sources":["tasks.js","schedule.js","scheduler.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","props","handleChange","event","id","target","dataset","name","charAt","substring","value","copy","state","inputs","setState","tasks","length","task","difficulty","questions","bind","addField","removeField","clearAll","preventDefault","this","prevState","clear","map","input","key","className","type","data-id","onChange","min","checked","onClick","submit","React","Component","Schedule","start","Date","setHours","setMinutes","setMilliseconds","end","startTime","localStorage","getItem","endTime","changeTimes","time","timeToReturn","setSeconds","Math","ceil","getMinutes","getTime","setDate","getDate","setItem","currentTime","roundTimeQuarterHour","schedule","i","j","curr","diff","push","startMoment","endMoment","toLocaleTimeString","Scheduler","JSON","parse","onSubmit","newTasks","newSchedule","calcTime","stringify","removeItem","tpq","style","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8dff204.chunk.js","sourcesContent":["import React from 'react';\nimport './tasks.css';\n\nclass Tasks extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {inputs: (props.tasks && props.tasks.length > 0) ? props.tasks : [{id: 0, task: \"\", difficulty: \"very easy\", questions: 1}]};\n        this.handleChange = this.handleChange.bind(this);\n        this.addField = this.addField.bind(this);\n        this.removeField = this.removeField.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    addField(event) {\n        event.preventDefault();\n        this.setState((prevState) => ({\n            inputs: [...prevState.inputs, {id: prevState.inputs.length, task: \"\", difficulty: \"very easy\", questions: 1}]\n        }))\n    }\n\n    removeField(id) {\n        let copy = [...this.state.inputs];\n        copy[id] = null;\n        this.setState({\n            inputs: copy\n        });\n    }\n\n    handleChange = (event) => {\n        const id = event.target.dataset.id;\n        let name = event.target.name;\n        if (name.charAt(0) === 'd') {\n            name = name.substring(0, 10);\n        }\n        const value = event.target.value;\n        let copy = [...this.state.inputs];\n        copy[id][name] = value;\n        this.setState({\n            inputs: copy\n        });\n    }\n\n    clearAll() {\n        this.props.clear();\n        this.setState({\n            inputs: [{id: 0, task: \"\", difficulty: \"very easy\", questions: 1}]\n        });\n    }\n\n    render() {\n        return (\n            <div id=\"tasks\">\n                <div>\n                    {this.state.inputs.map(input => (input) ? (\n                        <div key={input.id} className=\"form-field\">\n                            <div className=\"texts\">\n                                <div>\n                                <label>\n                                <span className=\"text-label\">Task</span>\n                                <input type=\"text\" data-id={input.id} name=\"task\" onChange={this.handleChange} value={input.task} />\n                            </label>\n                                    </div>\n                                <div>\n                            <label>\n                            <span className=\"text-label\">Questions</span>\n                                <input type=\"number\" data-id={input.id} name=\"questions\" onChange={this.handleChange} value={input.questions} min=\"1\" />\n                            </label>\n                            </div>\n                            </div>\n                            <label>\n                                <ul className=\"difficulty\">\n                                <li><input type=\"radio\" data-id={input.id} name={\"difficulty\"+input.id} onChange={this.handleChange} checked={(input.difficulty === \"very easy\") ? true : false} value={\"very easy\"} />very easy</li>\n                                <li><input type=\"radio\" data-id={input.id} name={\"difficulty\"+input.id} onChange={this.handleChange} checked={(input.difficulty === \"easy\") ? true : false} value={\"easy\"} />easy</li>\n                                <li><input type=\"radio\" data-id={input.id} name={\"difficulty\"+input.id} onChange={this.handleChange} checked={(input.difficulty === \"medium\") ? true : false} value={\"medium\"} />medium</li>\n                                <li><input type=\"radio\" data-id={input.id} name={\"difficulty\"+input.id} onChange={this.handleChange} checked={(input.difficulty === \"hard\") ? true : false} value={\"hard\"} />hard</li>\n                                <li><input type=\"radio\" data-id={input.id} name={\"difficulty\"+input.id} onChange={this.handleChange} checked={(input.difficulty === \"very hard\") ? true : false} value={\"very hard\"} />very hard</li>\n                                </ul>                          \n                            </label>\n                            \n                            <button className=\"remove-button\" onClick={() => this.removeField(input.id)}>X</button>\n                        </div>) : null\n                    )}\n                    <div className=\"submit-buttons\">\n                        <button onClick={() => this.props.submit(this.state.inputs)}>Schedule</button>\n                        <button onClick={this.addField}>Add Task</button>\n                        <button onClick={this.clearAll}>Clear</button>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nexport default Tasks;","import React from 'react';\nimport TimeRange from 'react-time-range';\n\nimport './schedule.css';\n\nclass Schedule extends React.Component {\n    constructor(props) {\n        super(props);\n        const start = new Date();\n        start.setHours(8);\n        start.setMinutes(0);\n        start.setMilliseconds(0);\n        const end = new Date(start);\n        end.setHours(22);\n        this.state = {startTime: (localStorage.getItem(\"start\")) ? localStorage.getItem(\"start\") : start,\n        endTime: (localStorage.getItem(\"end\")) ? localStorage.getItem(\"end\") : end};\n        this.changeTimes = this.changeTimes.bind(this);\n    }\n\n    allotTimes() {\n        \n    }\n\n    roundTimeQuarterHour(time) {\n        var timeToReturn = new Date(time);\n    \n        timeToReturn.setMilliseconds(0);\n        timeToReturn.setSeconds(0);\n        timeToReturn.setMinutes(Math.ceil(timeToReturn.getMinutes() / 15) * 15);\n        return timeToReturn;\n    }\n\n    changeTimes(event) {\n        let start = new Date(event.startTime);\n        let end = new Date(event.endTime);\n        if (start.getTime() >= end.getTime()) {\n            end.setDate(end.getDate() + 1);\n        }\n        localStorage.setItem(\"start\", start);\n        localStorage.setItem(\"end\", end);\n        this.setState({\n            startTime: start,\n            endTime: end\n        });\n    }\n\n    render() {\n        let currentTime = this.roundTimeQuarterHour(new Date());\n        let start = this.roundTimeQuarterHour(new Date(this.state.startTime));\n        let end = this.roundTimeQuarterHour(new Date(this.state.endTime));\n        const schedule = [];\n        const tasks = this.props.schedule;\n        for (let i = 0, j = 0; i < tasks.length; i++) {\n            const curr = tasks[i];\n            let startTime = currentTime;\n            if (startTime.getTime() < start.getTime() || startTime.getTime() >= end.getTime()) {\n                start.setDate(start.getDate() + 1);\n                end.setDate(end.getDate() + 1);\n                currentTime = new Date(start.getTime());\n                startTime = start;\n            }\n            let endTime = this.roundTimeQuarterHour(new Date(currentTime.getTime() + curr.time*60000));\n            while (endTime.getTime() > end.getTime()) {\n                const diff = endTime.getTime() - end.getTime();\n                const event = {\n                    name: curr.name,\n                    startTime: startTime,\n                    endTime: end,\n                    id: j\n                }\n                j++;\n                schedule.push(event);\n                start.setDate(start.getDate() + 1);\n                end.setDate(end.getDate() + 1);\n                currentTime = new Date(start.getTime() + diff);\n                startTime = start;\n                endTime = this.roundTimeQuarterHour(new Date(currentTime.getTime()));\n            }\n            currentTime = endTime;\n            const event = {\n                name: curr.name,\n                startTime: startTime,\n                endTime: endTime,\n                id: j\n            }\n            j++;\n            schedule.push(event);\n        }\n        return (\n            <div id=\"schedule\">\n                <div id=\"range\">\n                    <TimeRange\n                        startMoment={this.state.startTime}\n                        endMoment={this.state.endTime}\n                        onChange={this.changeTimes}\n                    />\n                </div>\n                \n                {schedule.map(event => \n                    <div key={event.id} className=\"event\">\n                        <ul className=\"event-list\">\n                            <li className=\"name\">{event.name}</li>\n                            <li className=\"start\">{event.startTime.toLocaleTimeString()}</li>\n                            <li className=\"dash\">{\"-\"}</li>\n                            <li className=\"end\">{event.endTime.toLocaleTimeString()}</li>\n                        </ul>\n                    </div>    \n                )}\n            </div>\n        );\n    }\n}\n\nexport default Schedule;","import React from 'react';\nimport Tasks from './tasks.js';\nimport Schedule from './schedule.js';\n\nclass Scheduler extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: (localStorage.getItem(\"tasks\")) ? JSON.parse(localStorage.getItem(\"tasks\")) : [],\n            schedule: (localStorage.getItem(\"schedule\")) ? JSON.parse(localStorage.getItem(\"schedule\")) : []\n        };\n        this.onSubmit = this.onSubmit.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    onSubmit(inputs) {\n        const newTasks = [];\n        const newSchedule = [];\n        for (let i = 0, j = 0; i < inputs.length; i++) {\n            let curr = { ...inputs[i]};\n            if (!curr) {continue;}\n            if (curr.task === \"\") {\n                continue;\n            } else if (curr.difficulty !== \"very easy\" && curr.difficulty !== \"easy\" && curr.difficulty !== \"medium\" && curr.difficulty !== \"hard\" && curr.difficulty !== \"very hard\") {\n                continue;\n            } else if (curr.questions === 0) {\n                continue;\n            }\n            curr.id = j;\n            newTasks.push(curr);\n            const task = {\n                name: curr.task,\n                time: this.calcTime(curr.difficulty, curr.questions)\n            };\n            newSchedule.push(task);\n            j++;\n        }\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n        localStorage.setItem(\"schedule\", JSON.stringify(newSchedule));\n        this.setState({\n            tasks: newTasks,\n            schedule: newSchedule\n        })\n    }\n\n    clearAll() {\n        localStorage.removeItem(\"tasks\");\n        localStorage.removeItem(\"schedule\");\n        this.setState({\n            tasks: [],\n            schedule: []\n        })\n    }\n\n    calcTime(difficulty, questions) {\n        let tpq = 0;\n        switch (difficulty) {\n            case \"very easy\":\n                tpq = 2;\n                break;\n            case \"easy\":\n                tpq = 5;\n                break;\n            case \"medium\":\n                tpq = 10;\n                break;\n            case \"hard\":\n                tpq = 20;\n                break;\n            case \"very hard\":\n                tpq = 30;\n                break;\n        }\n        return tpq * questions;\n    }\n\n    render() {\n        return (\n            <div id=\"scheduler\">\n                <h1 style={{textAlign: \"center\"}}>Scheduler</h1>\n                <Tasks submit={ this.onSubmit } tasks={ this.state.tasks } clear={ this.clearAll }/>\n                <Schedule schedule={this.state.schedule} />\n            </div>\n        );\n    }\n}\n\nexport default Scheduler;","import React from 'react';\n\nimport Scheduler from './scheduler.js';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t    <Scheduler />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}